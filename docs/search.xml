<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>新的博客</title>
      <link href="/2019/05/12/new-blog/"/>
      <url>/2019/05/12/new-blog/</url>
      
        <content type="html"><![CDATA[<p>在某年某月的某一天，你发现了新的世界，欢迎来到我新的个人博客，这里是Dodd，前端咸鱼一条，偶尔分享分享技术，有时能发发牢骚，希望能让你们在我的技术文章中有所收获。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ueditor 跨域的问题研究</title>
      <link href="/2017/03/13/ueditor-cross-origin/"/>
      <url>/2017/03/13/ueditor-cross-origin/</url>
      
        <content type="html"><![CDATA[<h3 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h3><p>这段时间在做CMS毕业设计项目，项目是nodejs后台，angular+require前台<br>前后端完全分离，采用ajax来获取数据渲染到前台上，所以前端不用任何后台语言，纯html/css/js，我将前端放在了80端口，后端放在3008端口，实际上属于两个完全不同域名。<br><a id="more"></a></p><h3 id="二、问题"><a href="#二、问题" class="headerlink" title="二、问题"></a>二、问题</h3><p>首先是官方没有给nodejs的版本、然后就是这篇文章的主要问题跨域。</p><h3 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h3><p>UE官方给的源码都是前后端在一起，我下载了一个PHP版本的，文件结构如下：<br><img src="http://img.blog.csdn.net/20170323132937542?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRG9kZDkxOTk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>其中PHP文件夹是服务端代码，因为我用的node，所以走你~删之~~<br>其余的我们放入前端相关地方，然后引入之即可，需要引入的文件有三</p><ol><li>ueditor.all.(min.)js  主文件不用说</li><li>ueditor.config.js  配置文件</li><li>third-party/zeroclipboard/ZeroClipboard.min.js</li><li>lang下的语言文件</li></ol><p>接着，要配置UE的Home，serverUrl，我直接在ueditor.config.js 用绝对路径写死了 然后就可以开心愉快的在页面里使用啦<br><img src="http://img.blog.csdn.net/20170323133559398?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRG9kZDkxOTk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>但是，图片上传呢，服务端呢，翻了官网插件，哎呦，找到一个<a href="https://github.com/netpi/ueditor" target="_blank" rel="noopener">ue for nodejs</a>果断用之，翻阅其源码，就是处理了一下文件的保存，然后通知前端是否保存成功之类的事情。</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs undefined">var ueditor = require(&quot;./ueditor&quot;);//注意这里的‘./’ 因为我改了他的代码，所以直接把他的lib/index.js拷出来做为自己的文件用了原版只要直接require(&quot;ueditor&quot;)就好了(当然前提是你是通过npm install ueditor安装的)<br>app.use(&quot;/ue&quot;, ueditor(path.join(__dirname, &apos;public/upload/&apos;), function(req, res, next) &#123;<br>// ueditor 客户发起上传图片请求<br><br>if (req.query.action === &apos;uploadimage&apos;) &#123;<br><br>// 这里你可以获得上传图片的信息<br>var foo = req.ueditor;<br>// console.log(foo.filename); // exp.png<br>// console.log(foo.encoding); // 7bit<br>// console.log(foo.mimetype); // image/png<br><br>// 下面填写你要把图片保存到的路径 （ 以 path.join(__dirname, &apos;public&apos;) 作为根路径）<br>var img_url = req.session.userName;<br>res.ue_up(img_url); //你只要输入要保存的地址 。保存操作交给ueditor来做<br>&#125;<br>//  客户端发起图片列表请求<br>else if (req.query.action === &apos;listimage&apos;) &#123;<br>var dir_url = req.session.userName; // 插件作者:要展示给客户端的文件夹路径 笔者:这里我用了用户的用户名作为文件夹名字，请读者自行改之<br>res.ue_list(dir_url) // 客户端会列出 dir_url 目录下的所有图片<br>&#125;<br>// 客户端发起其它请求<br>else &#123;<br><br>res.setHeader(&apos;Content-Type&apos;, &apos;application/json&apos;);<br>// 这里填写 ueditor.config.json 这个文件的路径<br>res.jsonp(require(&apos;./ueditor.config.json&apos;));<br>&#125;<br>&#125;));<br></code></pre></td></tr></table></figure><p>这是后台的服务端，小插曲，UE有两个配置文件，一个是前端的，还有后端的配置文件所以后端，我们只需要用jsonp把下图中的config.json暴露出来就可以，这个文件在 UE官方源码的后台代码文件夹中，这里就是PHP文件夹<br><img src="http://img.blog.csdn.net/20170323135326991?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRG9kZDkxOTk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>这里有个坑，Json标准是不支持注释的，所以用node去解析的时候会出现问题，没办法，我只好把注释全删了(当然做了个备份)</p><p>搞定这些之后，现在前端不上传图片就不会报错了，但是人类的欲望是无尽的，我们又怎么能停步于此呢，我们要上传图片！！！不管是单张的(比较坑),还是多张的(非常坑)。<br>首先讲一下为什么这两个区分开来，我们来看官方的这段话，这段话原地址请点<a href="http://fex.baidu.com/ueditor/#dev-crossdomain" target="_blank" rel="noopener">这儿</a><br><img src="http://img.blog.csdn.net/20170323140109746?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRG9kZDkxOTk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>坑爹有木有，为了兼容低版本浏览器，单图提交用了iframe，而iframe不支持跨域读取内容，完了，我们的欲望要得不到满足了，(┬＿┬)↘ 跌，但是官方说要发挥想象力，网上就有人说了，<strong>b域名的ue，上传图片到a域名，a域名保存图片成功后，重定向到b域名，在给个参数，b域名后台做处理后在返回就好了。</strong> 坑爹，可是我的项目前端没有后台呀！！！那怎么办，然后我就发挥想象力，想象力你懂得！a域名把消息封装成参数，然后重定向到静态页面，静态页面通过js在body onload的时候把消息写到页面上去，就除了如下两个代码</p><h4 id="a域名后台代码"><a href="#a域名后台代码" class="headerlink" title="a域名后台代码:"></a>a域名后台代码:</h4><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs undefined">res.ue_up = function(img_url) &#123;<br>          var tmpdir = path.join(os.tmpdir(), path.basename(filename));<br>          var name = snowflake.nextId() + path.extname(tmpdir);<br>          var dest = path.join(static_url, img_url, name);<br>          var writeStream = fs.createWriteStream(tmpdir);<br>          file.pipe(writeStream);<br>          writeStream.on(&quot;close&quot;, function() &#123;<br>            fse.move(tmpdir, dest, function(err) &#123;<br>              if (err) throw err;<br>              var obj = &#123;<br>                &apos;url&apos;: host + &quot;upload/&quot; + path.join(img_url, name).replace(/\\/g, &apos;/&apos;),//注意，这里的host是后台服务器地址，因为上传的文件存到a域名下了，所以这里地址也改了。<br>                &apos;title&apos;: req.body.pictitle,<br>                &apos;original&apos;: filename,<br>                &apos;state&apos;: &apos;SUCCESS&apos;<br>              &#125;<br><br>              res.redirect(webAddress + &quot;ue.html?obj=&quot; + encodeURIComponent(JSON.stringify(obj)));//我改了这个地方，将obj封装了之后作为参数重定向到webAddress也就是前端地址的ue.html页面上去<br>            &#125;);<br>          &#125;)<br>        &#125;;<br></code></pre></td></tr></table></figure><p>上边这些代码在ueditor for node 的那个lib/index.js里，也就是我的ueditor.js里，</p><p>b域名 ue.html：</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt; <br>&lt;script type=&quot;text/javascript&quot;&gt;<br>//获取参数的方法，网上找的<br>function getUrlParam(name) &#123;<br>var reg = new RegExp(&quot;(^|&amp;)&quot; + name + &quot;=([^&amp;]*)(&amp;|$)&quot;); //构造一个含有目标参数的正则表达式对象<br>var r = window.location.search.substr(1).match(reg); //匹配目标参数<br>if (r != null) return unescape(r[2]);<br>return null; //返回参数值<br>&#125;<br>//写参数到页面注意要在onload时调用<br>var  getdata=function() &#123;<br>document.getElementsByTagName(&apos;body&apos;)[0].innerHTML=getUrlParam(&apos;obj&apos;);<br>&#125;<br>&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body onload=&quot;getdata();&quot;&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>这样就完成了单图片上<del>床囧rz=З</del> 传的功能</p><h4 id="让后我们来说说多图-Orz"><a href="#让后我们来说说多图-Orz" class="headerlink" title="让后我们来说说多图 Orz"></a>让后我们来说说多图 Orz</h4><p>多图上传的原理官方没有解释，我来解释，多图上传通过弹出一个dialogs来实现各种操作，相关文件都在dialogs里，查看dialogs/image/image.html我们发现上传用了webupload，而webupload是通过自己构建ajax来实现图片上传的，唯一有个问题，就是关于跨域session/cookie的问题，UE和webupload都没有说到，要在image.html文件所引入的image.js文件的365行左右初始化webupload配置的时候加上<code>withCredentials:true,</code>参数如下图<img src="http://img.blog.csdn.net/20170323142039165?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRG9kZDkxOTk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"> 否则a域名的后台就得不到session了<br>当然这里有个小插曲，ajax的跨域需要后台headers配合，下边是我的配置</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined">app.use(&apos;/&apos;, function(req, res, next) &#123;<br>    res.header(&quot;Access-Control-Allow-Origin&quot;, config.cros===&quot;*&quot;?req.headers.origin:config.cros);<br>    res.header(&apos;Access-Control-Allow-Methods&apos;, &apos;PUT, GET, POST, DELETE, OPTIONS&apos;);<br>    res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;X-Requested-With,x_requested_with&quot;);<br>    res.header(&quot;Access-Control-Allow-Credentials&quot;,&quot;true&quot;);//跨域session<br>    if(req.method==&quot;OPTIONS&quot;) res.sendStatus(200);/*让options请求快速返回*/<br>    else  next();<br>&#125;);<br></code></pre></td></tr></table></figure><p>上边为什么在method==options的时候要返回200，详情可以了解 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener">CORS preflight</a><br>行了，接下来可以愉快的多图上传了，<br><img src="http://img.blog.csdn.net/20170323142912253?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRG9kZDkxOTk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>什么鬼，跨域访问不允许重定向，我**，单图要重定向，多图ajax不能重定向，算了，只能在后台判断一下是不是ajax，</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">if (req.xhr||req.headers[&apos;x_requested_with&apos;]===&apos;XMLHttpRequest&apos;) &#123;<br>                res.jsonp(obj);//如果是ajax则直接jsonp<br>              &#125; else &#123;<br>                res.redirect(webAddress + &quot;ue.html?obj=&quot; + encodeURIComponent(JSON.stringify(obj)));//如果是表单提交，也就是单图的iframe提交，则重定向<br>              &#125;<br></code></pre></td></tr></table></figure><p>只此，UE的单图和多图上传在前后端完全分离的跨域情况下完全解决，这是我的方案，在nodejs下，同理可以推广到其他后台语言</p><p>PS:ie8下听说会用flash提交图片，我不知道如何让flash提交带上session/cookie，所以可能在ie8下后台会丢失session/cookie，未经测试。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据挖掘 关联规则的FP-growth-tree（FP增长树）的python实现 使用方法</title>
      <link href="/2016/03/31/FP-grow-tree/"/>
      <url>/2016/03/31/FP-grow-tree/</url>
      
        <content type="html"><![CDATA[<h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><blockquote><p><a href="http://git.oschina.net/Dodd/FP-grow-tree" target="_blank" rel="noopener">点我去找代码</a></p></blockquote><a id="more"></a><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><ol><li>FP_Grow_tree.py :入口类</li><li>fptree.py：构建树的类</li><li>node.py 节点数据结构类</li><li>sample.py：样例类</li><li>tree.py：FP-grow 算法类生成模式基数据集</li><li>unit.py：组合函数和子集函数</li></ol><h2 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h2><p>导入 FP_Grow_tree.py 类，下边代码为 sample.py 的实例</p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#-*- coding:utf-8 –*-</span><br><br><span class="hljs-keyword">import</span> FP_Grow_tree<br>sample=[<br>[<span class="hljs-string">'milk'</span>,<span class="hljs-string">'eggs'</span>,<span class="hljs-string">'bread'</span>,<span class="hljs-string">'chips'</span>],<br>[<span class="hljs-string">'eggs'</span>,<span class="hljs-string">'popcorn'</span>,<span class="hljs-string">'chips'</span>,<span class="hljs-string">'beer'</span>],<br>[<span class="hljs-string">'eggs'</span>,<span class="hljs-string">'bread'</span>,<span class="hljs-string">'chips'</span>],<br>[<span class="hljs-string">'milk'</span>,<span class="hljs-string">'eggs'</span>,<span class="hljs-string">'bread'</span>,<span class="hljs-string">'popcorn'</span>,<span class="hljs-string">'chips'</span>,<span class="hljs-string">'beer'</span>],<br>[<span class="hljs-string">'milk'</span>,<span class="hljs-string">'bread'</span>,<span class="hljs-string">'beer'</span>],<br>[<span class="hljs-string">'eggs'</span>,<span class="hljs-string">'bread'</span>,<span class="hljs-string">'beer'</span>],<br>[<span class="hljs-string">'milk'</span>,<span class="hljs-string">'bread'</span>,<span class="hljs-string">'chips'</span>],<br>[<span class="hljs-string">'milk'</span>,<span class="hljs-string">'eggs'</span>,<span class="hljs-string">'bread'</span>,<span class="hljs-string">'butter'</span>,<span class="hljs-string">'chips'</span>],<br>[<span class="hljs-string">'milk'</span>,<span class="hljs-string">'eggs'</span>,<span class="hljs-string">'butter'</span>,<span class="hljs-string">'chips'</span>]<br>]<br>sample1=[<br>[<span class="hljs-string">u'牛奶'</span>,<span class="hljs-string">u'鸡蛋'</span>,<span class="hljs-string">u'面包'</span>,<span class="hljs-string">u'薯片'</span>],<br>[<span class="hljs-string">u'鸡蛋'</span>,<span class="hljs-string">u'爆米花'</span>,<span class="hljs-string">u'薯片'</span>,<span class="hljs-string">u'啤酒'</span>],<br>[<span class="hljs-string">u'鸡蛋'</span>,<span class="hljs-string">u'面包'</span>,<span class="hljs-string">u'薯片'</span>],<br>[<span class="hljs-string">u'牛奶'</span>,<span class="hljs-string">u'鸡蛋'</span>,<span class="hljs-string">u'面包'</span>,<span class="hljs-string">u'爆米花'</span>,<span class="hljs-string">u'薯片'</span>,<span class="hljs-string">u'啤酒'</span>],<br>[<span class="hljs-string">u'牛奶'</span>,<span class="hljs-string">u'面包'</span>,<span class="hljs-string">u'啤酒'</span>],<br>[<span class="hljs-string">u'鸡蛋'</span>,<span class="hljs-string">u'面包'</span>,<span class="hljs-string">u'啤酒'</span>],<br>[<span class="hljs-string">u'牛奶'</span>,<span class="hljs-string">u'面包'</span>,<span class="hljs-string">u'薯片'</span>],<br>[<span class="hljs-string">u'牛奶'</span>,<span class="hljs-string">u'鸡蛋'</span>,<span class="hljs-string">u'面包'</span>,<span class="hljs-string">u'黄油'</span>,<span class="hljs-string">u'薯片'</span>],<br>[<span class="hljs-string">u'牛奶'</span>,<span class="hljs-string">u'鸡蛋'</span>,<span class="hljs-string">u'黄油'</span>,<span class="hljs-string">u'薯片'</span>]<br>]<br><span class="hljs-comment">#print(sample1)</span><br><span class="hljs-comment">##参数说明 sample为事务数据集 []为递归过程中的基,support为最小支持度</span><br>support=<span class="hljs-number">3</span><br>ff=FP_Grow_tree.FP_Grow_tree(sample1,[],support)<br><span class="hljs-comment">##打印频繁集</span><br>ff.printfrequent()<br></code></pre></td></tr></table></figure><h2 id="依赖环境"><a href="#依赖环境" class="headerlink" title="依赖环境"></a>依赖环境</h2><ol><li>python3.x</li><li>python itertools</li><li>python operator<br>装完 python3.x 好像第二第三都会自带。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>有空实现实现书本上的算法也是极好的，可以锻炼一下能力，渣渣写的很乱，大神看了不要见怪。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据挖掘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2016 第七届蓝桥杯 c/c++ B组省赛真题及解题报告</title>
      <link href="/2016/03/20/2016lanqiao/"/>
      <url>/2016/03/20/2016lanqiao/</url>
      
        <content type="html"><![CDATA[<font color="red">勘误1：第6题第4个 if最后一个条件粗心写错了，答案应为1580。条件应为<code>abs(a[3]-a[7])!=1</code>,宝宝心理苦啊！！感谢zzh童鞋的提醒。</font><p><font color="red">勘误2：第7题在判断连通的时候条件写错了，后两个if条件中是应该是&lt;=12 落了一个等于号，正确答案应为116。</font><br><a id="more"></a></p><blockquote><h2 id="1-煤球数目"><a href="#1-煤球数目" class="headerlink" title="1.煤球数目"></a><strong>1.煤球数目</strong></h2></blockquote><blockquote><p>有一堆煤球，堆成三角棱锥形。具体：<br>第一层放1个，<br>第二层3个（排列成三角形），<br>第三层6个（排列成三角形），<br>第四层10个（排列成三角形），<br>….<br>如果一共有100层，共有多少个煤球？</p></blockquote><blockquote><p>请填表示煤球总数目的数字。<br>注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。</p></blockquote><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>第n层的煤球数是n*(n+1)/2个,共100层，放进for循环累加一下。注意求的是前一百层一共,答案为171700</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> x=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">101</span>;i++)&#123;<br><span class="hljs-comment">//printf("i:%d\n",(1+i)*(i)/2);</span><br>x+=(<span class="hljs-number">1</span>+i)*(i)/<span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"x:%lld\n"</span>,x);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><blockquote><h2 id="2-生日蜡烛"><a href="#2-生日蜡烛" class="headerlink" title="2.生日蜡烛"></a><strong>2.生日蜡烛</strong></h2></blockquote><blockquote><p>某君从某年开始每年都举办一次生日party，并且每次都要吹熄与年龄相同根数的蜡烛。</p></blockquote><blockquote><p>现在算起来，他一共吹熄了236根蜡烛。</p></blockquote><blockquote><p>请问，他从多少岁开始过生日party的？</p></blockquote><blockquote><p>请填写他开始过生日party的年龄数。<br>注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。</p></blockquote><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>假设他从第i年开始过，一共过了k年，写两个for穷举一下，1-100范围内，利用等差数列求和公式，满足这个式子的$(2<em>i+k)</em>(k+1)==472$就是答案，最后答案为26。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">100</span>;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;<span class="hljs-number">100</span>;k++)&#123;<br><span class="hljs-keyword">if</span>((<span class="hljs-number">2</span>*i+k)*(k+<span class="hljs-number">1</span>)==<span class="hljs-number">472</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"i:%d k:%d\n"</span>,i,k);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><blockquote><h2 id="3-凑算式"><a href="#3-凑算式" class="headerlink" title="3.凑算式"></a><strong>3.凑算式</strong></h2></blockquote><blockquote><p><img src="http://img.blog.csdn.net/20160320152805039" alt="这里写图片描述"></p></blockquote><blockquote><p>这个算式中A~I代表1~9的数字，不同的字母代表不同的数字。</p></blockquote><blockquote><p>比如：<br>6+8/3+952/714 就是一种解法，<br>5+3/1+972/486 是另一种解法。</p></blockquote><blockquote><p>这个算式一共有多少种解法？</p></blockquote><blockquote><p>注意：你提交应该是个整数，不要填写任何多余的内容或说明性文字。</p></blockquote><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>利用c++中的全排列函数全排列一下1-9，然后条件判断一下就可以了。<br>答案为29</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//         a,b,c,d,e,f,g,h,i</span><br><span class="hljs-keyword">int</span> a[<span class="hljs-number">10</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;,count=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">do</span>&#123;<br><span class="hljs-keyword">int</span> ghi=(a[<span class="hljs-number">6</span>]*<span class="hljs-number">100</span>+a[<span class="hljs-number">7</span>]*<span class="hljs-number">10</span>+a[<span class="hljs-number">8</span>]);<br><span class="hljs-keyword">int</span> def=a[<span class="hljs-number">3</span>]*<span class="hljs-number">100</span>+a[<span class="hljs-number">4</span>]*<span class="hljs-number">10</span>+a[<span class="hljs-number">5</span>];<br><span class="hljs-keyword">if</span>((a[<span class="hljs-number">0</span>]*a[<span class="hljs-number">2</span>]*ghi)+(a[<span class="hljs-number">1</span>]*ghi)+(def*a[<span class="hljs-number">2</span>])==<span class="hljs-number">10</span>*a[<span class="hljs-number">2</span>]*ghi)&#123;<br>count++;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d+%d/%d+%d%d%d/%d%d%d=10\n"</span>,a[<span class="hljs-number">0</span>],a[<span class="hljs-number">1</span>],a[<span class="hljs-number">2</span>],a[<span class="hljs-number">3</span>],a[<span class="hljs-number">4</span>],a[<span class="hljs-number">5</span>],a[<span class="hljs-number">6</span>],a[<span class="hljs-number">7</span>],a[<span class="hljs-number">8</span>]);<br>&#125;<br>&#125;<span class="hljs-keyword">while</span>(next_permutation(a,a+<span class="hljs-number">9</span>));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"cout:%d\n"</span>,count);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><blockquote><h2 id="4-快速排序"><a href="#4-快速排序" class="headerlink" title="4.快速排序"></a><strong>4.快速排序</strong></h2></blockquote><blockquote><p>排序在各种场合经常被用到。<br>快速排序是十分常用的高效率的算法。</p></blockquote><blockquote><p>其思想是：先选一个“标尺”，<br>用它把整个队列过一遍筛子，<br>以保证：其左边的元素都不大于它，其右边的元素都不小于它。</p></blockquote><blockquote><p>这样，排序问题就被分割为两个子区间。<br>再分别对子区间排序就可以了。</p></blockquote><blockquote><p>下面的代码是一种实现，请分析并填写划线部分缺少的代码。</p></blockquote><figure class="hljs highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[], <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span><br></span>&#123;<br><span class="hljs-keyword">int</span> t = a[i];<br>a[i] = a[j];<br>a[j] = t;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">partition</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[], <span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> r)</span><br></span>&#123;<br>    <span class="hljs-keyword">int</span> i = p;<br>    <span class="hljs-keyword">int</span> j = r + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> x = a[p];<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">while</span>(i&lt;r &amp;&amp; a[++i]&lt;x);<br>        <span class="hljs-keyword">while</span>(a[--j]&gt;x);<br>        <span class="hljs-keyword">if</span>(i&gt;=j) <span class="hljs-keyword">break</span>;<br>        swap(a,i,j);<br>    &#125;<br>______________________;<br>    <span class="hljs-keyword">return</span> j;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">quicksort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[], <span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> r)</span><br></span>&#123;<br>    <span class="hljs-keyword">if</span>(p&lt;r)&#123;<br>        <span class="hljs-keyword">int</span> q = partition(a,p,r);<br>        quicksort(a,p,q<span class="hljs-number">-1</span>);<br>        quicksort(a,q+<span class="hljs-number">1</span>,r);<br>    &#125;<br>&#125;<br>    <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br><span class="hljs-keyword">int</span> i;<br><span class="hljs-keyword">int</span> a[] = &#123;<span class="hljs-number">5</span>,<span class="hljs-number">13</span>,<span class="hljs-number">6</span>,<span class="hljs-number">24</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">19</span>,<span class="hljs-number">27</span>,<span class="hljs-number">6</span>,<span class="hljs-number">12</span>,<span class="hljs-number">1</span>,<span class="hljs-number">17</span>&#125;;<br><span class="hljs-keyword">int</span> N = <span class="hljs-number">12</span>;<br><br>quicksort(a, <span class="hljs-number">0</span>, N<span class="hljs-number">-1</span>);<br><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;N; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>, a[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：只填写缺少的内容，不要书写任何题面已有代码或说明性文字。</p></blockquote><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><p>很常规的快速排序，不会填的自己翻一下数据结构的书。</p><h3 id="填空代码"><a href="#填空代码" class="headerlink" title="填空代码"></a>填空代码</h3><figure class="hljs highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">swap(a,j,p)<br></code></pre></td></tr></table></figure><hr><blockquote><h2 id="5-抽签"><a href="#5-抽签" class="headerlink" title="5.抽签"></a><strong>5.抽签</strong></h2></blockquote><blockquote><p>X星球要派出一个5人组成的观察团前往W星。<br>其中：<br>A国最多可以派出4人。<br>B国最多可以派出2人。<br>C国最多可以派出2人。<br>….</p></blockquote><blockquote><p>那么最终派往W星的观察团会有多少种国别的不同组合呢？</p></blockquote><blockquote><p>下面的程序解决了这个问题。<br>数组a[] 中既是每个国家可以派出的最多的名额。<br>程序执行结果为：<br>DEFFF<br>CEFFF<br>CDFFF<br>CDEFF<br>CCFFF<br>CCEFF<br>CCDFF<br>CCDEF<br>BEFFF<br>BDFFF<br>BDEFF<br>BCFFF<br>BCEFF<br>BCDFF<br>BCDEF<br>….<br>(以下省略，总共101行)</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs undefined">#include &lt;stdio.h&gt;<br>#define N 6<br>#define M 5<br>#define BUF 1024<br><br>void f(int a[], int k, int m, char b[])<br>&#123;<br>int i,j;<br><br>if(k==N)&#123; <br>b[M] = 0;<br>if(m==0) printf(&quot;%s\n&quot;,b);<br>return;<br>&#125;<br><br>for(i=0; i&lt;=a[k]; i++)&#123;<br>for(j=0; j&lt;i; j++) b[M-m+j] = k+&apos;A&apos;;<br>______________________;  //填空位置<br>&#125;<br>&#125;<br>int main()<br>&#123;<br>int  a[N] = &#123;4,2,2,1,1,3&#125;;<br>char b[BUF];<br>f(a,0,M,b);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>仔细阅读代码，填写划线部分缺少的内容。</p></blockquote><blockquote><p>注意：不要填写任何已有内容或说明性文字。</p></blockquote><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><p>很明显是一个递归搜索题，第一个参数和最后一个参数肯定是不变的，第二个参数的意思是现在该选哪一个国家，第三个参数的意思是还有几个没有选。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">f(a,k+<span class="hljs-number">1</span>,m-i,b)<br></code></pre></td></tr></table></figure><hr><blockquote><h2 id="6-方格填数"><a href="#6-方格填数" class="headerlink" title="6.方格填数"></a><strong>6.方格填数</strong></h2></blockquote><blockquote><p>如下的10个格子<br><img src="http://img.blog.csdn.net/20160320154048055" alt="这里写图片描述"></p></blockquote><blockquote><p>填入0~9的数字。要求：连续的两个数字不能相邻。<br>（左右、上下、对角都算相邻）</p></blockquote><blockquote><p>一共有多少种可能的填数方案？</p></blockquote><blockquote><p>请填写表示方案数目的整数。<br>注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。</p></blockquote><h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><p>还是利用c++的全排列函数，然后写个judge函数来判断一下相邻的数字是不是连续的就可以了，条件写的时候比较麻烦，但是复制粘贴就好啦，按一定的顺序写，不要漏了。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[])</span></span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(a[<span class="hljs-number">0</span>]-a[<span class="hljs-number">1</span>])!=<span class="hljs-number">1</span>&amp;&amp;<span class="hljs-built_in">abs</span>(a[<span class="hljs-number">0</span>]-a[<span class="hljs-number">4</span>])!=<span class="hljs-number">1</span>&amp;&amp;<span class="hljs-built_in">abs</span>(a[<span class="hljs-number">0</span>]-a[<span class="hljs-number">5</span>])!=<span class="hljs-number">1</span>&amp;&amp;<span class="hljs-built_in">abs</span>(a[<span class="hljs-number">0</span>]-a[<span class="hljs-number">3</span>])!=<span class="hljs-number">1</span>)<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(a[<span class="hljs-number">1</span>]-a[<span class="hljs-number">2</span>])!=<span class="hljs-number">1</span>&amp;&amp;<span class="hljs-built_in">abs</span>(a[<span class="hljs-number">1</span>]-a[<span class="hljs-number">4</span>])!=<span class="hljs-number">1</span>&amp;&amp;<span class="hljs-built_in">abs</span>(a[<span class="hljs-number">1</span>]-a[<span class="hljs-number">5</span>])!=<span class="hljs-number">1</span>&amp;&amp;<span class="hljs-built_in">abs</span>(a[<span class="hljs-number">1</span>]-a[<span class="hljs-number">6</span>])!=<span class="hljs-number">1</span>)<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(a[<span class="hljs-number">2</span>]-a[<span class="hljs-number">5</span>])!=<span class="hljs-number">1</span>&amp;&amp;<span class="hljs-built_in">abs</span>(a[<span class="hljs-number">2</span>]-a[<span class="hljs-number">6</span>])!=<span class="hljs-number">1</span>)<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(a[<span class="hljs-number">3</span>]-a[<span class="hljs-number">4</span>])!=<span class="hljs-number">1</span>&amp;&amp;<span class="hljs-built_in">abs</span>(a[<span class="hljs-number">3</span>]-a[<span class="hljs-number">8</span>])!=<span class="hljs-number">1</span>&amp;&amp;<span class="hljs-built_in">abs</span>(a[<span class="hljs-number">4</span>]-a[<span class="hljs-number">7</span>])!=<span class="hljs-number">1</span>)<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(a[<span class="hljs-number">4</span>]-a[<span class="hljs-number">5</span>])!=<span class="hljs-number">1</span>&amp;&amp;<span class="hljs-built_in">abs</span>(a[<span class="hljs-number">4</span>]-a[<span class="hljs-number">7</span>])!=<span class="hljs-number">1</span>&amp;&amp;<span class="hljs-built_in">abs</span>(a[<span class="hljs-number">4</span>]-a[<span class="hljs-number">8</span>])!=<span class="hljs-number">1</span>&amp;&amp;<span class="hljs-built_in">abs</span>(a[<span class="hljs-number">4</span>]-a[<span class="hljs-number">9</span>])!=<span class="hljs-number">1</span>)<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(a[<span class="hljs-number">5</span>]-a[<span class="hljs-number">6</span>])!=<span class="hljs-number">1</span>&amp;&amp;<span class="hljs-built_in">abs</span>(a[<span class="hljs-number">5</span>]-a[<span class="hljs-number">8</span>])!=<span class="hljs-number">1</span>&amp;&amp;<span class="hljs-built_in">abs</span>(a[<span class="hljs-number">5</span>]-a[<span class="hljs-number">9</span>])!=<span class="hljs-number">1</span>)<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(a[<span class="hljs-number">6</span>]-a[<span class="hljs-number">9</span>])!=<span class="hljs-number">1</span>)<span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(a[<span class="hljs-number">7</span>]-a[<span class="hljs-number">8</span>])!=<span class="hljs-number">1</span>)<span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(a[<span class="hljs-number">8</span>]-a[<span class="hljs-number">9</span>])!=<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> a[<span class="hljs-number">10</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;,count=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">do</span>&#123;<br><span class="hljs-keyword">if</span>(judge(a))&#123;<br>count++;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"  %d %d %d\n%d %d %d %d\n%d %d %d  \n"</span>,a[<span class="hljs-number">0</span>],a[<span class="hljs-number">1</span>],a[<span class="hljs-number">2</span>],a[<span class="hljs-number">3</span>],a[<span class="hljs-number">4</span>],a[<span class="hljs-number">5</span>],a[<span class="hljs-number">6</span>],a[<span class="hljs-number">7</span>],a[<span class="hljs-number">8</span>],a[<span class="hljs-number">9</span>]);<br>&#125;<br>&#125;<span class="hljs-keyword">while</span>(next_permutation(a,a+<span class="hljs-number">10</span>));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"cout:%d\n"</span>,count);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><blockquote><h2 id="7-剪邮票"><a href="#7-剪邮票" class="headerlink" title="7.剪邮票"></a><strong>7.剪邮票</strong></h2><p><img src="http://img.blog.csdn.net/20160320154417617" alt="图1"><br><strong>图1</strong><br><img src="http://img.blog.csdn.net/20160320154444117" alt="图2"><br><img src="http://img.blog.csdn.net/20160320154507898" alt="图3"><br>如【图1.jpg】, 有12张连在一起的12生肖的邮票。<br>现在你要从中剪下5张来，要求必须是连着的。<br>（仅仅连接一个角不算相连）<br>比如，【图2.jpg】，【图3.jpg】中，粉红色所示部分就是合格的剪取。</p></blockquote><blockquote><p>请你计算，一共有多少种不同的剪取方法。</p></blockquote><blockquote><p>请填写表示方案数目的整数。<br>注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。</p></blockquote><h3 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h3><p>暴力枚举剪下来的部分的数字，复杂度是$12^5$，然后判断一下是否相连，判断的时候利用了像广搜BFS一样的思想用一个队列，从一个点开始，加入与该点相连的所有在剪下来的部分中的数，然后就和广搜的思想一样了。结果填空，不用担心时间，但速度也很快。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(x,n) for(x=n;x&lt;13;x++)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[])</span></span>&#123;<br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>q.push(a[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">int</span> c=<span class="hljs-number">0</span>,find[<span class="hljs-number">20</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)&#123;<br>find[a[i]]=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>]==<span class="hljs-number">3</span>&amp;&amp;a[<span class="hljs-number">1</span>]==<span class="hljs-number">6</span>&amp;&amp;a[<span class="hljs-number">2</span>]==<span class="hljs-number">7</span>&amp;&amp;a[<span class="hljs-number">3</span>]==<span class="hljs-number">8</span>&amp;&amp;a[<span class="hljs-number">4</span>]==<span class="hljs-number">11</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"test\n"</span>);<br>&#125;<br><span class="hljs-keyword">int</span> vis[<span class="hljs-number">20</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>vis[a[<span class="hljs-number">0</span>]]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(!q.empty())&#123;<br><span class="hljs-keyword">int</span> t=q.front();<br><span class="hljs-comment">//printf("%d\n",t);</span><br>q.pop();<br>c++;<br><span class="hljs-keyword">if</span>(t<span class="hljs-number">-1</span>&gt;<span class="hljs-number">0</span>&amp;&amp;vis[t<span class="hljs-number">-1</span>]!=<span class="hljs-number">1</span>&amp;&amp;find[t<span class="hljs-number">-1</span>]&amp;&amp;t!=<span class="hljs-number">5</span>&amp;&amp;t!=<span class="hljs-number">9</span>)&#123;<br>vis[t<span class="hljs-number">-1</span>]=<span class="hljs-number">1</span>;<br>q.push(t<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(t<span class="hljs-number">-4</span>&gt;<span class="hljs-number">0</span>&amp;&amp;vis[t<span class="hljs-number">-4</span>]!=<span class="hljs-number">1</span>&amp;&amp;find[t<span class="hljs-number">-4</span>])&#123;<br>vis[t<span class="hljs-number">-4</span>]=<span class="hljs-number">1</span>;<br>q.push(t<span class="hljs-number">-4</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(t+<span class="hljs-number">1</span>&lt;<span class="hljs-number">12</span>&amp;&amp;vis[t+<span class="hljs-number">1</span>]!=<span class="hljs-number">1</span>&amp;&amp;find[t+<span class="hljs-number">1</span>]&amp;&amp;(t!=<span class="hljs-number">4</span>&amp;&amp;t!=<span class="hljs-number">8</span>))<br>&#123;<br>vis[t+<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>q.push(t+<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(t+<span class="hljs-number">4</span>&lt;<span class="hljs-number">12</span>&amp;&amp;vis[t+<span class="hljs-number">4</span>]!=<span class="hljs-number">1</span>&amp;&amp;find[t+<span class="hljs-number">4</span>])&#123;<br>vis[t+<span class="hljs-number">4</span>]=<span class="hljs-number">1</span>;<br>q.push(t+<span class="hljs-number">4</span>);<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">if</span>(c==<span class="hljs-number">5</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> a[<span class="hljs-number">6</span>],count=<span class="hljs-number">0</span>;<br>rep(a[<span class="hljs-number">0</span>],<span class="hljs-number">1</span>)rep(a[<span class="hljs-number">1</span>],a[<span class="hljs-number">0</span>])rep(a[<span class="hljs-number">2</span>],a[<span class="hljs-number">1</span>])rep(a[<span class="hljs-number">3</span>],a[<span class="hljs-number">2</span>])rep(a[<span class="hljs-number">4</span>],a[<span class="hljs-number">3</span>])&#123;<br><span class="hljs-comment">//rep(a[0],1)rep(a[1],1)rep(a[2],1)rep(a[3],1)rep(a[4],1)&#123;</span><br><span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>]==a[<span class="hljs-number">1</span>]||a[<span class="hljs-number">0</span>]==a[<span class="hljs-number">2</span>]||a[<span class="hljs-number">0</span>]==a[<span class="hljs-number">3</span>]||a[<span class="hljs-number">0</span>]==a[<span class="hljs-number">4</span>]||a[<span class="hljs-number">1</span>]==a[<span class="hljs-number">2</span>]||a[<span class="hljs-number">1</span>]==a[<span class="hljs-number">3</span>]||a[<span class="hljs-number">1</span>]==a[<span class="hljs-number">4</span>]||a[<span class="hljs-number">2</span>]==a[<span class="hljs-number">3</span>]||a[<span class="hljs-number">2</span>]==a[<span class="hljs-number">4</span>]||a[<span class="hljs-number">3</span>]==a[<span class="hljs-number">4</span>])<br><span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span>(judge(a))&#123;<br><br><span class="hljs-keyword">int</span> find[<span class="hljs-number">20</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)&#123;<br>find[a[i]]=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Case%d:\n"</span>,count+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">3</span>;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;<span class="hljs-number">5</span>;j++)&#123;<br><span class="hljs-keyword">if</span>(find[(i<span class="hljs-number">-1</span>)*<span class="hljs-number">4</span>+j])<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%3c"</span>,<span class="hljs-string">'*'</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%3d"</span>,(i<span class="hljs-number">-1</span>)*<span class="hljs-number">4</span>+j);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);<br>&#125;<br><br>count++;<br>&#125;<br><br><span class="hljs-comment">//printf("%d %d %d %d %d\n",a[0],a[1],a[2],a[3],a[4]);</span><br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"count:%d\n"</span>,count);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><blockquote><h2 id="8-四平方和"><a href="#8-四平方和" class="headerlink" title="8.四平方和"></a><strong>8.四平方和</strong></h2></blockquote><blockquote><p>四平方和定理，又称为拉格朗日定理：<br>每个正整数都可以表示为至多4个正整数的平方和。<br>如果把0包括进去，就正好可以表示为4个数的平方和。</p></blockquote><blockquote><p>比如：<br>5 = 0^2 + 0^2 + 1^2 + 2^2<br>7 = 1^2 + 1^2 + 1^2 + 2^2<br>（^符号表示乘方的意思）</p></blockquote><blockquote><p>对于一个给定的正整数，可能存在多种平方和的表示法。<br>要求你对4个数排序：<br>0 &lt;= a &lt;= b &lt;= c &lt;= d<br>并对所有的可能表示法按 a,b,c,d 为联合主键升序排列，最后输出第一个表示法</p></blockquote><blockquote><p>程序输入为一个正整数N (N&lt;5000000)<br>要求输出4个非负整数，按从小到大排序，中间用空格分开</p></blockquote><blockquote><p>例如，输入：<br>5<br>则程序应该输出：<br>0 0 1 2</p></blockquote><blockquote><p>再例如，输入：<br>12<br>则程序应该输出：<br>0 2 2 2</p></blockquote><blockquote><p>再例如，输入：<br>773535<br>则程序应该输出：<br>1 1 267 838</p></blockquote><blockquote><p>资源约定：<br>峰值内存消耗 &lt; 256M<br>CPU消耗  &lt; 3000ms</p></blockquote><blockquote><p>请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。</p></blockquote><blockquote><p>所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。</p></blockquote><blockquote><p>注意: main函数需要返回0<br>注意: 只使用ANSI C/ANSI C++ 标准，不要调用依赖于编译环境或操作系统的特殊函数。<br>注意: 所有依赖的函数必须明确地在源文件中 #include <xxx>， 不能通过工程设置而省略常用头文件。</xxx></p></blockquote><blockquote><p>提交时，注意选择所期望的编译器类型。</p></blockquote><h3 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h3><p>直接枚举从小的开始，枚举到答案就可以return了，不过注意的是只枚举三个数，最后一个数可以倒着求出来，然后正过来验证，看代码就明白啦。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 2300</span><br><span class="hljs-comment">//注意范围，题目给的范围枚举到2300就够了</span><br><span class="hljs-keyword">int</span> flag=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;MAXN;i++)&#123;<br><span class="hljs-keyword">if</span>(i*i&lt;=n)<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i;j&lt;MAXN;j++)&#123;<br><span class="hljs-keyword">if</span>(i*i+j*j&lt;=n)<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=j;k&lt;MAXN;k++)&#123;<br><span class="hljs-keyword">int</span> l=(<span class="hljs-keyword">int</span>)<span class="hljs-built_in">sqrt</span>(n-i*i-j*j-k*k);<span class="hljs-comment">//算出第4个数</span><br><span class="hljs-keyword">if</span>(i*i+j*j+k*k+l*l==n)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d %d %d %d"</span>,i,j,k,l);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><blockquote><h2 id="9-交换瓶子"><a href="#9-交换瓶子" class="headerlink" title="9.交换瓶子"></a><strong>9.交换瓶子</strong></h2></blockquote><blockquote><p>有N个瓶子，编号 1 ~ N，放在架子上。</p></blockquote><blockquote><p>比如有5个瓶子：<br>2 1 3 5 4</p></blockquote><blockquote><p>要求每次拿起2个瓶子，交换它们的位置。<br>经过若干次后，使得瓶子的序号为：<br>1 2 3 4 5</p></blockquote><blockquote><p>对于这么简单的情况，显然，至少需要交换2次就可以复位。</p></blockquote><blockquote><p>如果瓶子更多呢？你可以通过编程来解决。</p></blockquote><blockquote><p>输入格式为两行：<br>第一行: 一个正整数N（N&lt;10000）, 表示瓶子的数目<br>第二行：N个正整数，用空格分开，表示瓶子目前的排列情况。</p></blockquote><blockquote><p>输出数据为一行一个正整数，表示至少交换多少次，才能完成排序。</p></blockquote><blockquote><p>例如，输入：<br>5<br>3 1 2 5 4</p></blockquote><blockquote><p>程序应该输出：<br>3</p></blockquote><blockquote><p>再例如，输入：<br>5<br>5 4 3 2 1</p></blockquote><blockquote><p>程序应该输出：<br>2</p></blockquote><blockquote><p>资源约定：<br>峰值内存消耗 &lt; 256M<br>CPU消耗  &lt; 1000ms</p></blockquote><blockquote><p>请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。</p></blockquote><blockquote><p>所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。</p></blockquote><blockquote><p>注意: main函数需要返回0<br>注意: 只使用ANSI C/ANSI C++ 标准，不要调用依赖于编译环境或操作系统的特殊函数。<br>注意: 所有依赖的函数必须明确地在源文件中 #include <xxx>， 不能通过工程设置而省略常用头文件。</xxx></p></blockquote><blockquote><p>提交时，注意选择所期望的编译器类型。</p></blockquote><h3 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h3><p>这个题乍一看觉得和排序有关，其实应该是和置换有关。<br>可以看一下置换里的闭包的概念，求的就是闭包的长度，具体思路等会儿补上。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="hljs highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">int</span> a[<span class="hljs-number">10001</span>],b[<span class="hljs-number">10001</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br><span class="hljs-keyword">int</span> t=x,sum=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//printf("x:%d ",x);</span><br><span class="hljs-keyword">while</span>(a[x]!=t)&#123;<br><span class="hljs-comment">//printf("%d ",a[x]);</span><br>sum++;<br>b[a[x]]=<span class="hljs-number">1</span>;<br>x=a[x];<br>&#125;<br><span class="hljs-comment">//printf("\n");</span><br><span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> n,count=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;a[i]);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">if</span>(b[i])<span class="hljs-keyword">continue</span>;<br>count+=f(i);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,count);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><blockquote><p>##10.<strong>最大比例</strong></p></blockquote><blockquote><p>X星球的某个大奖赛设了M级奖励。每个级别的奖金是一个正整数。<br>并且，相邻的两个级别间的比例是个固定值。<br>也就是说：所有级别的奖金数构成了一个等比数列。比如：<br>16,24,36,54<br>其等比值为：3/2</p></blockquote><blockquote><p>现在，我们随机调查了一些获奖者的奖金数。<br>请你据此推算可能的最大的等比值。</p></blockquote><blockquote><p>输入格式：<br>第一行为数字N，表示接下的一行包含N个正整数<br>第二行N个正整数Xi(Xi&lt;1 000 000 000 000)，用空格分开。每个整数表示调查到的某人的奖金数额</p></blockquote><blockquote><p>要求输出：<br>一个形如A/B的分数，要求A、B互质。表示可能的最大比例系数</p></blockquote><blockquote><p>测试数据保证了输入格式正确，并且最大比例是存在的。</p></blockquote><blockquote><p>例如，输入：<br>3<br>1250 200 32</p></blockquote><blockquote><p>程序应该输出：<br>25/4</p></blockquote><blockquote><p>再例如，输入：<br>4<br>3125 32 32 200</p></blockquote><blockquote><p>程序应该输出：<br>5/2</p></blockquote><blockquote><p>再例如，输入：<br>3<br>549755813888 524288 2</p></blockquote><blockquote><p>程序应该输出：<br>4/1</p></blockquote><blockquote><p>资源约定：<br>峰值内存消耗 &lt; 256M<br>CPU消耗  &lt; 3000ms</p></blockquote><blockquote><p>请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。</p></blockquote><blockquote><p>所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。</p></blockquote><blockquote><p>注意: main函数需要返回0<br>注意: 只使用ANSI C/ANSI C++ 标准，不要调用依赖于编译环境或操作系统的特殊函数。<br>注意: 所有依赖的函数必须明确地在源文件中 #include <xxx>， 不能通过工程设置而省略常用头文件。</xxx></p></blockquote><blockquote><p>提交时，注意选择所期望的编译器类型。</p></blockquote><h3 id="解题思路-9"><a href="#解题思路-9" class="headerlink" title="解题思路"></a>解题思路</h3><p>暂时没写出来，等写出来了再补吧</p><p>#以上均为个人解答，非官方题解，仅供参考，如有错误，欢迎指出。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
